buildscript {
    repositories {
        jcenter()
        maven {
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'net.minecraftforge.gradle.forge'

evaluationDependsOn(":..:Chameleon-${minecraft_base_version}")

ext {
    chameleon = project(":..:Chameleon-${minecraft_base_version}")
}

version = "${minecraft_version}-${mod_version}"
group= "com.jaquadro.minecraft.storagedrawers" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "StorageDrawers"

idea {
  module.iml.withXml {
    def atts = it.asNode().component.content.sourceFolder
      .find { it.@url == 'file://$MODULE_DIR$/resources' }
      .attributes()
    atts.put('type', 'java-resource')
  }
}

sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = chameleon.forge_version
    runDir = "runtime"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = chameleon.forge_mappings

    replaceIn "StorageDrawers.java"
    replace '@VERSION@', project.version
    replace 'required-after:chameleon', "required-after:chameleon@[${chameleon_version},${chameleon_max_version})"
}

sourceSets.main {
    java {
        srcDirs project.projectDir.getPath() + '/src'
    }
    resources {
        srcDirs project.projectDir.getPath() + '/resources'
    }
}

/*sourceSets.api {
    java {
        srcDirs project.projectDir.getPath() + '/api/mcp'
    }
}*/

repositories {
    maven { // JEI
        name = "JEI repo"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven { // CraftTweaker
        name = "jared maven"
        url "http://maven.blamejared.com/"
    }
    maven { // HWYLA
        name = "HWYLA repo"
        url "https://maven.cil.li/"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven"
    }
}

dependencies {
    compile chameleon

    compileOnly "mezz.jei:jei_${minecraft_version}:${jei_version}:api"
    runtime "mezz.jei:jei_${minecraft_version}:${jei_version}"

    compileOnly "mcp.mobius.waila:Hwyla:${hwyla_version}:api"
    runtime "mcp.mobius.waila:Hwyla:${hwyla_version}"

    //deobfCompile "MineTweaker3:MineTweaker3-API:${mt_version}"
    //deobfCompile "org.ow2.asm:asm-debug-all:5.0.3"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    include "com/jaquadro/minecraft/storagedrawers/**"
    include "assets/**"
    include "mcmod.info"
    include "pack.mcmeta"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

task apiJar(type: Jar, dependsOn: 'sourceMainJava') {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'com/jaquadro/minecraft/storagedrawers/api/**/*'
    classifier 'api'
}

artifacts {
    archives deobfJar
    archives apiJar
    archives sourceJar
    archives jar
}

publishing.publications {
    StorageDrawers(MavenPublication) {
        groupId = project.group
        artifactId = project.archivesBaseName
        version = project.version
        artifact deobfJar
        artifact sourceJar
        artifact apiJar
        artifact jar
    }
}

bintrayUpload.dependsOn build

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['StorageDrawers']
    publish = true
    pkg {
        repo = 'dev'
        name = 'storagedrawers'
        version {
            name = project.version
            released = new Date()
        }
    }
}